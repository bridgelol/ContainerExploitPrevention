package world.minecraftservers.plugin;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.wrappers.WrappedChatComponent;
import io.papermc.paper.adventure.AdventureComponent;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
import org.bukkit.Bukkit;
import org.bukkit.NamespacedKey;
import org.bukkit.block.Block;
import org.bukkit.block.BlockState;
import org.bukkit.block.Container;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.java.JavaPlugin;

public class ContainerExploitPrevention extends JavaPlugin implements Listener {

    private final NamespacedKey clientSideRenderTitleKey = new NamespacedKey(this, "ContainerCSRTitle");

    @Override
    public void onEnable() {
        getServer().getPluginManager().registerEvents(this, this);

        if (Bukkit.getPluginManager().getPlugin("ProtocolLib") != null) {
            getLogger().info("ProtocolLib detected, enabling client-side rendering of container titles");
            ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(this, ListenerPriority.NORMAL, PacketType.Play.Server.OPEN_WINDOW) {
                @Override
                public void onPacketSending(PacketEvent event) {
                    Inventory topInventory = event.getPlayer().getOpenInventory().getTopInventory();

                    if (topInventory.getHolder() instanceof Container container) {
                        PersistentDataContainer pdc = container.getPersistentDataContainer();
                        String serializedCustomName = pdc.get(clientSideRenderTitleKey, PersistentDataType.STRING);

                        if (serializedCustomName != null) {
                            PacketContainer packet = event.getPacket();
                            packet.getChatComponents().write(0, WrappedChatComponent.fromJson(serializedCustomName));
                        }
                    }
                }
            });
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onBlockPlace(BlockPlaceEvent event) {
        Block block = event.getBlock();
        BlockState state = block.getState(false);

        if (state instanceof Container container) {
            Component customName = container.customName();

            if (customName != null) {
                container.customName(null);
                PersistentDataContainer pdc = container.getPersistentDataContainer();
                pdc.set(clientSideRenderTitleKey, PersistentDataType.STRING, GsonComponentSerializer.gson().serialize(customName));
            }
        }
    }
}
