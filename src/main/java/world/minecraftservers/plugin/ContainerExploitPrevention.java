package world.minecraftservers.plugin;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.wrappers.WrappedChatComponent;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextComponent;
import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
import org.bukkit.Bukkit;
import org.bukkit.Nameable;
import org.bukkit.NamespacedKey;
import org.bukkit.block.Block;
import org.bukkit.block.BlockState;
import org.bukkit.block.TileState;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.vehicle.VehicleCreateEvent;
import org.bukkit.event.vehicle.VehicleDestroyEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;


public class ContainerExploitPrevention extends JavaPlugin implements Listener {

    private final NamespacedKey clientSideRenderTitleKey = new NamespacedKey(this, "ContainerCSRTitle");
    private final Collection<ExemptTitle> exemptTitles = new HashSet<>();

    @Override
    public void onEnable() {
        getConfig().options().copyDefaults(true);
        saveConfig();

        reload();

        Objects.requireNonNull(getCommand("containerexploitpreventionreload")).setExecutor((sender, command, label, args) -> {
            if (!sender.hasPermission("containerexploitprevention.reload")) {
                sender.sendMessage("You do not have permission to use this command!");
                return true;
            }

            reload();
            sender.sendMessage("Reloaded!");
            return true;
        });

        getServer().getPluginManager().registerEvents(this, this);

        if (Bukkit.getPluginManager().getPlugin("ProtocolLib") != null) {
            getLogger().info("ProtocolLib detected, enabling client-side rendering of container titles");
            ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(this, ListenerPriority.NORMAL, PacketType.Play.Server.OPEN_WINDOW) {
                @Override
                public void onPacketSending(PacketEvent event) {
                    Inventory topInventory = event.getPlayer().getOpenInventory().getTopInventory();

                    if (topInventory.getHolder() instanceof TileState tileState) {
                        PersistentDataContainer pdc = tileState.getPersistentDataContainer();
                        String serializedCustomName = pdc.get(clientSideRenderTitleKey, PersistentDataType.STRING);

                        if (serializedCustomName != null) {
                            PacketContainer packet = event.getPacket();
                            packet.getChatComponents().write(0, WrappedChatComponent.fromJson(serializedCustomName));
                        }
                    } else if (topInventory.getHolder() instanceof Vehicle vehicle) {
                        PersistentDataContainer pdc = vehicle.getPersistentDataContainer();
                        String serializedCustomName = pdc.get(clientSideRenderTitleKey, PersistentDataType.STRING);

                        if (serializedCustomName != null) {
                            PacketContainer packet = event.getPacket();
                            packet.getChatComponents().write(0, WrappedChatComponent.fromJson(serializedCustomName));
                        }
                    }
                }
            });
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onBlockPlace(BlockPlaceEvent event) {
        Block block = event.getBlock();
        BlockState state = block.getState(false);

        if (state instanceof Nameable nameable) {
            Component customName = nameable.customName();

            if (customName != null && !isExempt(customName)) {
                if (state instanceof TileState tileState) {
                    nameable.customName(null);
                    PersistentDataContainer pdc = tileState.getPersistentDataContainer();
                    pdc.set(clientSideRenderTitleKey, PersistentDataType.STRING, GsonComponentSerializer.gson().serialize(customName));
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    public void onBlockBreak(BlockBreakEvent event) {
        Block block = event.getBlock();
        BlockState state = block.getState(false);

        if (state instanceof TileState tileState) {
            PersistentDataContainer pdc = tileState.getPersistentDataContainer();
            String serializedCustomName = pdc.get(clientSideRenderTitleKey, PersistentDataType.STRING);

            if (serializedCustomName != null) {
                if (state instanceof Nameable nameable) {
                    nameable.customName(GsonComponentSerializer.gson().deserialize(serializedCustomName));
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.MONITOR)
    public void onVehicleCreate(VehicleCreateEvent event) {
        Vehicle vehicle = event.getVehicle();

        if (vehicle instanceof InventoryHolder) {
            Component customName = vehicle.customName();

            if (customName != null && !isExempt(customName)) {
                vehicle.customName(null);
                PersistentDataContainer pdc = vehicle.getPersistentDataContainer();
                pdc.set(clientSideRenderTitleKey, PersistentDataType.STRING, GsonComponentSerializer.gson().serialize(customName));
            }
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    public void onVehicleDestroy(VehicleDestroyEvent event) {
        Vehicle vehicle = event.getVehicle();

        if (vehicle instanceof InventoryHolder) {
            PersistentDataContainer pdc = vehicle.getPersistentDataContainer();
            String serializedCustomName = pdc.get(clientSideRenderTitleKey, PersistentDataType.STRING);

            if (serializedCustomName != null) {
                vehicle.customName(GsonComponentSerializer.gson().deserialize(serializedCustomName));
            }
        }
    }

    private void reload() {
        reloadConfig();
        FileConfiguration config = getConfig();

        exemptTitles.clear();

        Map.of(
                ExemptType.EQUALS, config.getStringList("exempt.equals"),
                ExemptType.CONTAINS, config.getStringList("exempt.contains"),
                ExemptType.STARTS_WITH, config.getStringList("exempt.startsWith")
        ).forEach((type, titles) -> titles.forEach(title -> exemptTitles.add(new ExemptTitle(title, type))));
    }

    private boolean isExempt(Component title) {
        if (!(title instanceof TextComponent textComponent)) {
            return false;
        }

        final String content = textComponent.content();
        return exemptTitles.stream().anyMatch(exemptTitle -> exemptTitle.matches(content));
    }
}

record ExemptTitle(String title, ExemptType type) {
    public boolean matches(String other) {
        return type.getMatcher().matches(title, other);
    }
}

interface StringMatcher {
    boolean matches(String o1, String o2);
}

enum ExemptType {
    EQUALS(String::equals),
    CONTAINS(String::contains),
    STARTS_WITH(String::startsWith);

    private final StringMatcher matcher;

    ExemptType(StringMatcher matcher) {
        this.matcher = matcher;
    }

    public StringMatcher getMatcher() {
        return matcher;
    }
}